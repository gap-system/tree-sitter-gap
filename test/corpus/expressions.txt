=====================================
Lists
=====================================

[   ];
[ 1 ];
[ 1, 2 ];
[ 1, 2, ];
[  ,   ];
[  , 2 ];
[ 0, [ 1, 2 ], 3, 4 ];
[ 0, [  , 2 ],  , 4 ];

---

(source_file
  (list_expression)
  (list_expression (integer))
  (list_expression (integer) (integer))
  (list_expression (integer) (integer))
  (list_expression)
  (list_expression (integer))
  (list_expression (integer) (list_expression (integer) (integer)) (integer) (integer))
  (list_expression (integer) (list_expression (integer)) (integer))
  )

=====================================
Ranges
=====================================

[1..10];
[1,3..11];
[1,-1..-11];
[1.. 10];
[1 .. 10];
[1, 3..11];
[1,3 ..11];
[1,3.. 11];
[1, 3 .. 11];
---

(source_file
    (range_expression (integer) (integer))
    (range_expression (integer) (integer) (integer))
    (range_expression (integer) (unary_expression (integer)) (unary_expression (integer)))
    (range_expression (integer) (integer))
    (range_expression (integer) (integer))
    (range_expression (integer) (integer) (integer))
    (range_expression (integer) (integer) (integer))
    (range_expression (integer) (integer) (integer))
    (range_expression (integer) (integer) (integer)))

=====================================
Records
=====================================

rec();
rec(,);
rec(a:=1);
rec(a:=1,);
rec(1:=2);
rec(a:=1, b:=2);

---

(source_file
  (record_expression)
  (record_expression)
  (record_expression (identifier) (integer))
  (record_expression (identifier) (integer))
  (record_expression (integer) (integer))
  (record_expression (identifier) (integer) (identifier) (integer))
  )

=====================================
Permutations
=====================================

();
(1,2);
(1,2,3);
(1,2)(3,4,5);

---

(source_file
  (permutation_expression)
  (permutation_expression
    (permutation_cycle_expression
      (integer)
      (integer)))
  (permutation_expression
    (permutation_cycle_expression
      (integer)
      (integer)
      (integer)))
  (permutation_expression
    (permutation_cycle_expression
      (integer)
      (integer))
    (permutation_cycle_expression
      (integer)
      (integer)
      (integer)))
  )

=====================================
Functions
=====================================

function() end;
function(a) end;
function(a,b) end;
function(a...) end;
function(a,b...) end;

function()
    local x;
end;

function()
    return 1;
end;
function(a)
    return a;
end;
function()
    local x;
    return 1;
end;

---

(source_file
    (function (parameters))
    (function (parameters (identifier)))
    (function (parameters (identifier) (identifier)))
    (function (parameters (identifier) (ellipsis)))
    (function (parameters (identifier) (identifier) (ellipsis)))
    (function (parameters) (locals (identifier)))
    (function (parameters) (block (return_statement (integer))))
    (function (parameters (identifier)) (block (return_statement (identifier))))
    (function (parameters) (locals (identifier)) (block (return_statement (integer))))
    )   

=====================================
Inline Functions
=====================================

x -> 1;

x -> y -> 1;

x -> y -> x + y;

{} -> 42;

{x,y} -> x + y;

{x...} -> x;

---

(source_file
    (lambda (lambda_parameters (identifier)) (integer))
    (lambda (lambda_parameters (identifier)) (lambda (lambda_parameters (identifier)) (integer)))
    (lambda (lambda_parameters (identifier)) (lambda (lambda_parameters (identifier)) (binary_expression (identifier) (identifier))))
    (lambda (lambda_parameters) (integer))
    (lambda (lambda_parameters (identifier) (identifier)) (binary_expression (identifier) (identifier)))
    (lambda (lambda_parameters (identifier) (ellipsis)) (identifier))
    )

=====================================
Function calls
=====================================

foo();

foo(1);

foo(1, 1);

foo(bar());

---

(source_file
    (call (identifier) (argument_list))
    (call (identifier) (argument_list (integer)))
    (call (identifier) (argument_list (integer) (integer)))
    (call (identifier) (argument_list (call (identifier) (argument_list))))
    )


